const HEX_MODELS = Object.freeze({
  '3015:0011': 'H20',
  '0d9a:00f3': 'RTX7134',
  '0d9a:00f0': 'RTX7113'
})

const MODELS = Object.freeze({
  H20: {
    VENDOR_ID: 12309,
    PRODUCT_ID: 17,
    RINGING_DEVICE_USAGE_PAGE_WIN: '11',
    RINGING_DEVICE_USAGE_PAGE_MAC: '65280'
  },
  RTX7113: {
    VENDOR_ID: 3482,
    PRODUCT_ID: 240,
    RINGING_DEVICE_USAGE_PAGE_WIN: '65368', // 0xFF58 (vendor defined)
    RINGING_DEVICE_USAGE_PAGE_MAC: '65280' // not sure, needs some testing
  },
  RTX7134: {
    VENDOR_ID: 3482,
    PRODUCT_ID: 243,
    RINGING_DEVICE_USAGE_PAGE_WIN: '65368', // 0xFF58 (vendor defined)
    RINGING_DEVICE_USAGE_PAGE_MAC: '65280' // not sure, needs some testing
  }
})

// Events
const EVENTS = Object.freeze({
  H20: {
    OFF_HOOK: 'off-hook',
    ON_HOOK: 'on-hook',
    PLACED_ON_CRADLE: 'placed-on-cradle',
    REMOVED_FROM_CRADLE: 'removed-from-cradle',
    VOLUME_UP: 'volume-up',
    VOLUME_DOWN: 'volume-down',
    GENERIC_BUTTON_PRESS: 'button-pressed',
    MUTE_TOGGLE: 'mute-toggle',
    UNMUTE: 'unmute',
    RAW_COMMAND: 'raw-command'
  },
  RTX7113: {
    RAW_COMMAND: 'raw-command',
    PING_RECEIVED: 'ping-received',
    RING_ON_ACCEPTED: 'rtx-ring-on-accepted',
    RING_OFF_ACCEPTED: 'rtx-ring-off-accepted',
    MUTE_OFF_REQUESTED: 'rtx-mute-off-requested',
    MUTE_OFF_ACCEPTED: 'rtx-mute-off-accepted',
    HOOK_ON_REQUESTED: 'rtx-hook-on-requested',
    HOOK_ON_ACCEPTED: 'rtx-hook-on-accepted',
    HOOK_OFF_REQUESTED: 'rtx-hook-off-requested',
    HOOK_OFF_ACCEPTED: 'rtx-hook-off-accepted',
    MUTE_ON_REQUESTED: 'rtx-mute-on-requested',
    MUTE_ON_ACCEPTED: 'rtx-mute-on-accepted'
  },
  RTX7134: {
    // maybe the same as RTX7113
  }
})


// List of buffers known to be received from the headset
const READ_COMMANDS = Object.freeze({
  H20: {
    OFF_HOOK: [0x04, 0x02],
    ON_HOOK: [0x04, 0x00],
    PLACED_ON_CRADLE: [0x01, 0xff, 0x30],
    REMOVED_FROM_CRADLE: [0x01, 0xff, 0x40],
    VOLUME_UP: [0x06, 0x01],
    VOLUME_DOWN: [0x06, 0x02],
    GENERIC_BUTTON_PRESS: [0x06, 0x00],
    MUTE_TOGGLE: [0x04, 0x03],
    UNMUTE: [0x04, 0x02]
  },
  // These RTX commands include every byte as the documentation specifies. the 5th byte (commented)
  RTX7113: {
    PING_RECEIVED:      [0x58, 0x10, 0x00, 0x0B, /*0x00,*/ 0x82, 0x01, 0x32, 0x9B, 0x01, 0x01, 0x00, 0x02, 0x00, 0x00],
    RING_ON_ACCEPTED:   [0x58, 0x10, 0x00, 0x0B, /*0x00,*/ 0x81, 0x01, 0x01, 0x9B, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00],
    RING_OFF_ACCEPTED:  [0x58, 0x10, 0x00, 0x0B, /*0x00,*/ 0x81, 0x01, 0x01, 0x9B, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00],
    HOOK_OFF_REQUESTED: [0x58, 0x10, 0x00, 0x0B, /*0x00,*/ 0x81, 0x01, 0x02, 0x9B, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00],
    HOOK_OFF_ACCEPTED:  [0x58, 0x10, 0x00, 0x0B, /*0x00,*/ 0x81, 0x01, 0x01, 0x9B, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00],
    HOOK_ON_REQUESTED:  [0x58, 0x10, 0x00, 0x0B, /*0x00,*/ 0x81, 0x01, 0x02, 0x9B, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00],
    HOOK_ON_ACCEPTED:   [0x58, 0x10, 0x00, 0x0B, /*0x00,*/ 0x81, 0x01, 0x01, 0x9B, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00],
    MUTE_ON_REQUESTED:  [0x58, 0x10, 0x00, 0x0B, /*0x00,*/ 0x81, 0x01, 0x02, 0x9B, 0x09, 0x01, 0x00, 0x00, 0x00, 0x00],
    MUTE_ON_ACCEPTED:   [0x58, 0x10, 0x00, 0x0B, /*0x00,*/ 0x81, 0x01, 0x01, 0x9B, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00],
    MUTE_OFF_REQUESTED: [0x58, 0x10, 0x00, 0x0B, /*0x00,*/ 0x81, 0x01, 0x02, 0x9B, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00],
    MUTE_OFF_ACCEPTED:  [0x58, 0x10, 0x00, 0x0B, /*0x00,*/ 0x81, 0x01, 0x01, 0x9B, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00]
  }
})

// This commands go in the direction PC (DSP or CommandTester) to the target (Headset)
// The indications are messages from the PC to the target
const WRITE_COMMANDS = Object.freeze({
  H20: {
    INBOUND_CALL: [0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    ON_CALL: [0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    FINISH_CALL: [0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    MUTE: [0x05, 0x01, 0x01],
    UNMUTE: [0x05, 0x01, 0x00]
  },
  RTX7113: {
    PING:                [0x58, 0x10, 0x00, 0x07, 0x00, 0x01, 0x01, 0x00, 0x9B, 0x0C, 0x01],
    RING_ON_INDICATION:  [0x58, 0x10, 0x00, 0x0B, 0x00, 0x01, 0x01, 0x00, 0x9B, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00],
    RING_OFF_INDICATION: [0x58, 0x10, 0x00, 0x0B, 0x00, 0x01, 0x01, 0x00, 0x9B, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00],
    HOOK_ON_INDICATION:  [0x58, 0x10, 0x00, 0x0B, 0x00, 0x01, 0x01, 0x00, 0x9B, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00],
    HOOK_OFF_INDICATION: [0x58, 0x10, 0x00, 0x0B, 0x00, 0x01, 0x01, 0x00, 0x9B, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00],
    MUTE_ON_INDICATION:  [0x58, 0x10, 0x00, 0x0B, 0x00, 0x01, 0x01, 0x00, 0x9B, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00],
    MUTE_OFF_INDICATION: [0x58, 0x10, 0x00, 0x0B, 0x00, 0x01, 0x01, 0x00, 0x9B, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00]
  },
  RTX7134: {
    // maybe the same as RTX7113
  },
})

module.exports.MODELS = MODELS
module.exports.READ_COMMANDS = READ_COMMANDS
module.exports.WRITE_COMMANDS = WRITE_COMMANDS
module.exports.EVENTS = EVENTS
module.exports.HEX_MODELS = HEX_MODELS
